{"version":3,"sources":["./src/app/common/enums/search-type.enum.ts","./src/app/components/artist/artist-api-response.model.ts","./src/environments/environment.prod.ts","./src/app/common/services/http-util.service.ts","./src/app/components/song/song.service.ts","./src/app/components/artist/artist.service.ts","./src/app/components/search-component/search.service.ts","./src/app/common/services/enum-selector.ts","./src/app/common/components/enum-selector/enum-selector.component.html","./src/app/common/components/enum-selector/enum-selector.component.ts","./src/app/components/search-criteria-dropdown/search-criteria-dropdown.component.ts","./src/app/components/search-criteria-dropdown/search-criteria-dropdown.component.html","./src/app/common/invalid-characters/invalid-characters.directive.ts","./src/app/components/search-component/search-component.component.html","./src/app/components/search-component/search-component.component.ts","./src/app/components/lyrics/lyrics.service.ts","./src/app/components/lyrics/lyrics.component.ts","./src/app/components/lyrics/lyrics.component.html","./src/app/components/song-display/song-display.component.html","./src/app/components/song-display/song-display.component.ts","./src/app/components/artist-display/artist-display.component.html","./src/app/components/artist-display/artist-display.component.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":["SearchType","HitsEnum","HttpStatusCode","environment","production","headers","Map","set","host","HttpUtilService","httpClient","forEach","value","key","this","url","params","get","pipe","catchError","handleError","responseType","error","ErrorEvent","console","message","status","throwError","SongProxy","httpUtil","ROOT_CONTEXT","URL","id","SONG_URL","httpParams","toString","map","apiResponseWrapper","mapResponse","meta","SUCCESS","mapSong","response","song","songResponse","album","composers","getArtists","Set","writer_artists","releaseDate","release_date","singers","primary_artist","title","musicPlayerURL","apple_music_player_url","headerImageURL","header_image_url","lyricsPath","path","lyricsURL","artistsResponse","artists","artistResponse","add","fullName","name","imageURL","image_url","ArtistProxy","artistApiResponseWrapper","artist","bio","getBio","description","dom","children","child","length","grandChild","concat","properterChildernContainer","tag","attributeChildren","attributeChild","propertyChildren","propertyChild","SearchService","songProxy","artistProxy","SEARCH_URL","query","searchHitsStream","songResponses","getSongDetailsStream","e","songs","getSongStream","subscribe","getArtistStream","artistIds","artistId","getArtistSongsStream","mapSongsResponse","sort","page","perPage","ARTIST_SONGS_URL","append","songsResponse","apiHitsResponse","hits","filter","hit","type","Song","result","EnumSelector","enumType","keys","Object","isNaN","Number","enumValue","enumName","EnumSelectorComponent","onChange","anEnum","tempValue","selectedValue","getEnumName","enumValueOnChangedPayload","getEnumValue","emit","triggerOnChangeEvent","SearchCriteriaDropdownComponent","searchTypeOptions","selectedCriteria","event","selectedSearchType","InvalidCharactersDirective","el","arabicRegex","inputElement","appInputRestriction","integerOnly","noSpecialCharacters","indexOf","keyCode","ctrlKey","preventDefault","k","ch","String","fromCharCode","RegExp","test","regex","pasteData","clipboardData","getData","m","matches","exec","index","lastIndex","match","groupIndex","SearchComponentComponent","searchService","MAX_QUERY_LENGTH","MIN_QUERY_LENGTH","SEARCH_TYPE","selectedSong","selectedArtist","showResults","placeholder","searchCriteria","Title","noRecordsFound","serviceFailed","searchSongsStream","size","log","Artist","searchArtistsStream","warn","searchType","emitSelectedSong","undefined","emitSelectedArtist","setSearchPlaceholder","getResults","LyricsService","httpUtilService","getTextHTML","data","parseData","htmlContent","DOMParser","parseFromString","getElementsByTagName","getElementsByClassName","innerText","LyricsComponent","lyricsService","_lyricsPath","getLyricsStream","lyrics","SongDisplayComponent","ArtistDisplayComponent","AppComponent","titleService","domSanitizer","setTitle","setSelectedSong","setSelectedArtist","AppModule","bootstrapModule","catch","err","webpackEmptyAsyncContext","req","Promise","resolve","then","Error","code","module","exports"],"mappings":"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","file":"main.5e4dac2c02822ba3a434.js","sourcesContent":["/**\n * Search Type enum values to be displayed in a dropdown\n */\nexport enum SearchType {\n    Title,\n    Artist\n}\n","\r\n/**\r\n * Equivalent in-house interfaces for Genius API contracts(3rd party)\r\n */\r\nexport enum TagType {\r\n    ROOT = 'root',\r\n    PROPERTY = 'p',\r\n    ATTRIBUTE = 'a'\r\n}\r\n\r\nexport interface Data {\r\n    api_path?: string;\r\n}\r\n\r\nexport interface AttributeChild {\r\n    children?: PropertyChildren;\r\n}\r\n\r\nexport interface Attribute {\r\n    href?: string;\r\n    rel?: string;\r\n}\r\n\r\nexport interface PropertyChildrenContainer {\r\n    tag: string; // \"a\"\r\n    attributes?: Attribute;\r\n    data?: Data;\r\n    children?: AttributeChild[];\r\n}\r\nexport interface PropertyChildren {\r\n    tag: string; // \"p\"\r\n    children?: (string | PropertyChildrenContainer)[];\r\n}\r\n\r\nexport interface Dom {\r\n    tag: string; // enum of type TAG.ROOT\r\n    children: PropertyChildren[];\r\n}\r\n\r\nexport interface Description {\r\n    dom: Dom;\r\n}\r\n\r\nexport enum HitsEnum {\r\n    Song = 'song'\r\n}\r\n\r\nexport interface HitsResponse {\r\n    index: string; // song\r\n    type: string; // song..should be an enum\r\n    result: SongResponse;\r\n}\r\n\r\n// marker interface\r\n// tslint:disable-next-line:no-empty-interface\r\nexport interface ApiResponse {\r\n    //\r\n}\r\n\r\nexport interface ApiArtistResponse extends ApiResponse{\r\n    artist: ArtistResponse;\r\n}\r\n\r\nexport interface ApiHitsResponse extends ApiResponse {\r\n    hits: HitsResponse[];\r\n}\r\n\r\nexport interface ApiSongResponse extends ApiResponse {\r\n    song: SongResponse;\r\n}\r\n\r\nexport interface Response {\r\n    api_path: string;\r\n    id: number;\r\n    url: string;\r\n    description?: Description;\r\n    name?: string;\r\n}\r\nexport interface SongResponse extends Response {\r\n    full_title: string;\r\n    title: string;\r\n    album?: Album;\r\n    lyrics_owner_id: number;\r\n    path: string;\r\n    release_date?: string;\r\n    primary_artist?: ArtistResponse;\r\n    writer_artists?: ArtistResponse[];\r\n    apple_music_player_url?: string;\r\n    header_image_url?: string;\r\n}\r\n\r\nexport interface Album extends Response {\r\n    full_title: string;\r\n    artist: ArtistResponse;\r\n}\r\n\r\nexport interface ArtistResponse extends Response {\r\n    header_image_url: string;\r\n    image_url: string;\r\n    alternate_names?: string[];\r\n    facebook_name?: string;\r\n    followers_count?: number;\r\n    instagram_name?: string;\r\n}\r\n\r\nexport interface HttpStatus {\r\n    status: number; // http code like 200\r\n}\r\nexport interface ApiResponseWrapper {\r\n    meta: HttpStatus;\r\n    response: ApiResponse;\r\n}\r\n\r\nexport enum HttpStatusCode {\r\n    SUCCESS = 200,\r\n    NOT_FOUND = 404\r\n}\r\n","export const environment = {\r\n    production: true,\r\n    headers: new Map<string, string>()\r\n                .set('x-rapidapi-key', 'bd679e162fmsh3b27d1af46c4019p16b649jsneabc33a8416b')\r\n                .set('x-rapidapi-host', 'genius.p.rapidapi.com'),\r\n    host: 'genius.rapid'\r\n  };\r\n\r\n  // backup key: a1ff770785msh0a901c7f7f22cbap175c2ajsnc3cb738cb9ef\r\n  // original key: bd679e162fmsh3b27d1af46c4019p16b649jsneabc33a8416b\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs/internal/observable/throwError';\nimport { environment } from 'src/environments/environment';\n\n\n/**\n * Utility service to make http call over network.\n * It is wrapper over angular's httpClient service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpUtilService {\n\n  private headers: HttpHeaders = new HttpHeaders();\n\n  constructor(private httpClient: HttpClient) {\n    // read corresponding header values defined in environment configuration file and set it.\n    environment.headers.forEach((value, key) => this.headers = this.headers.set(key, value));\n  }\n\n  /**\n   * This method makes an HTTP GET call and returns typed data.\n   * @param url REST service end points\n   * @param params query parameters \n   */\n  public get<T>(url: string, params?: HttpParams): Observable<T> {\n    return this.httpClient.get<T>(url, {\n      headers: this.headers,\n      params\n    }).pipe(catchError(this.handleError));\n  }\n\n  /**\n   * This method makes an HTTP GET call and returns typed data.\n   * @param url REST service end points\n   * @param params query parameters \n   */\n  public getTextHTML(url: string, params?: HttpParams): Observable<string> {\n    return this.httpClient.get(url, {\n      headers: this.headers,\n      params,\n      responseType: 'text'\n    }).pipe(catchError(this.handleError));\n  }\n\n\n  private handleError(error: HttpErrorResponse): Observable<never> {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // Return an observable with a user-facing error message.\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","import { HttpParams } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { throwError } from 'rxjs';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpUtilService } from 'src/app/common/services/http-util.service';\nimport { Artist } from '../artist/artist.model';\nimport { ApiResponseWrapper, ApiSongResponse, ArtistResponse, HttpStatusCode, SongResponse } from './../artist/artist-api-response.model';\nimport { Song } from './song.model';\n\n/**\n * This service fetch song details for a given song Id. It maps 3rd part song response to in-house Song response type.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class SongProxy {\n\n  readonly ROOT_CONTEXT: string = '/genius-api';\n  readonly URL: string = `${this.ROOT_CONTEXT}/songs`;\n\n  constructor(private httpUtil: HttpUtilService) { }\n\n  /**\n   * Method to fetch song details stream.\n   * @param id song Id\n   * @returns Observable stream of Song.\n   */\n  public getSongStream(id: number): Observable<Song> {\n    const SONG_URL: string = `${this.URL}/${id}`;\n    const httpParams: HttpParams = new HttpParams().set('id', id.toString());\n    return this.httpUtil.get<ApiResponseWrapper>(SONG_URL, httpParams)\n      .pipe(map(apiResponseWrapper => this.mapResponse(apiResponseWrapper)),\n        catchError(() => {\n          return throwError('getSongStream service failed');\n        })\n      );\n  }\n\n  /**\n   * This method derives properties from ApiResponseWrapper and then maps it to in-house Song interface.\n   * @param apiResponseWrapper ApiResponseWrapper object\n   * @returns Song \n   */\n  public mapResponse(apiResponseWrapper: ApiResponseWrapper): Song {\n    if (apiResponseWrapper.meta.status === HttpStatusCode.SUCCESS) {\n      const apiSongResponse: ApiSongResponse = apiResponseWrapper.response as ApiSongResponse;\n      const song: Song = this.mapSong(apiSongResponse.song);\n      return song;\n    }\n  }\n\n  /**\n   * This method maps properties from SongResponse(3rd party) contract to Song(in-house)contract.\n   * @param songResponse 3rd party song response object\n   * @returns in-house song object\n   */\n  public mapSong(songResponse: SongResponse): Song {\n    const song: Song = {\n      id: songResponse.id,\n      album: songResponse.album,\n      composers: this.getArtists(new Set<ArtistResponse>(songResponse.writer_artists)),\n      releaseDate: songResponse.release_date,\n      singers: this.getArtists(new Set<ArtistResponse>([songResponse.primary_artist])),\n      title: songResponse.title,\n      musicPlayerURL: songResponse.apple_music_player_url,\n      headerImageURL: songResponse.header_image_url,\n      lyricsPath: songResponse.path,\n      lyricsURL: songResponse.url\n    };\n    return song;\n  }\n\n  /**\n   * This method maps properties from ArtistResponse(3rd party) contract to Artist(in-house)contract.\n   * @param artistsResponse 3rd party artist response object\n   * @returns in-house artist object\n   */\n  private getArtists(artistsResponse: Set<ArtistResponse>): Set<Artist> {\n    if (artistsResponse) {\n      const artists: Set<Artist> = new Set<Artist>();\n      artistsResponse.forEach(artistResponse => {\n        if (artistResponse) {\n          const artist: Artist = {\n            id: artistResponse.id,\n            fullName: artistResponse.name,\n            imageURL: artistResponse.image_url\n          };\n          artists.add(artist);\n        }\n      });\n      return artists;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { HttpUtilService } from 'src/app/common/services/http-util.service';\nimport {\n  ApiArtistResponse, ApiResponseWrapper, ArtistResponse, AttributeChild, Description, HttpStatusCode, PropertyChildren, PropertyChildrenContainer\n} from './artist-api-response.model';\nimport { Artist } from './artist.model';\n\n/**\n * Singleton service(proxy) to get artist information. \n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ArtistProxy {\n\n  URL: string = '/genius-api/artists';\n\n  constructor(private httpUtil: HttpUtilService) { }\n\n  /**\n   * This method fetches artist information for a given artist Id.\n   * @param id artist Id\n   * @returns Observable stream of Artist information\n   */\n  public getArtistStream(id: number): Observable<Artist> {\n    const ARTIST_URL: string = `${this.URL}/${id}`;\n    return this.httpUtil.get<ApiResponseWrapper>(ARTIST_URL).pipe(\n      map((artistApiResponseWrapper) => {\n        const artist: Artist = {};\n        if (\n          artistApiResponseWrapper &&\n          artistApiResponseWrapper.meta.status === HttpStatusCode.SUCCESS\n        ) {\n          const artistApiResponse: ApiArtistResponse = artistApiResponseWrapper.response as ApiArtistResponse;\n          const artistResponse: ArtistResponse = artistApiResponse.artist;\n          artist.fullName = artistResponse.name;\n          artist.id = artistResponse.id;\n          artist.bio = this.getBio(artistResponse.description);\n          artist.imageURL = artistResponse.image_url;\n          artist.headerImageURL = artistResponse.header_image_url;\n          artist.url = artistResponse.url;\n        }\n        return artist;\n      }),\n      catchError(() => {\n        return throwError('getArtistsStream service failed');\n      })\n    );\n  }\n\n  /**\n   * This method reads bio information from description object.\n   * API keeps bio infomation in embedded objects with links and references.\n   * This method drills down and collects all the information from the tree and returns as a single string\n   * @param description Description \n   * @returns bio information as a string\n   */\n  private getBio(description: Description): string {\n    let bio: string = '';\n    description.dom.children.forEach((child) => {\n      if (child && child.children && child.children.length) {\n        child.children.forEach((grandChild) => {\n          if (grandChild && typeof grandChild === 'string') {\n            bio = bio.concat(grandChild as string);\n          } else if (typeof grandChild === 'object') {\n            const properterChildernContainer: PropertyChildrenContainer = grandChild as PropertyChildrenContainer;\n            if (properterChildernContainer.tag === 'a') {\n              const attributeChildren: AttributeChild[] =\n                properterChildernContainer.children;\n              if (attributeChildren && attributeChildren.length) {\n                attributeChildren.forEach((attributeChild) => {\n                  if (\n                    attributeChild &&\n                    attributeChild.children &&\n                    attributeChildren.length\n                  ) {\n                    if (attributeChild.children.tag === 'em') {\n                      const propertyChildren: PropertyChildren =\n                        attributeChild.children;\n                      if (\n                        propertyChildren.children &&\n                        propertyChildren.children.length\n                      ) {\n                        propertyChildren.children.forEach((propertyChild) => {\n                          if (typeof propertyChild === 'string') {\n                            bio = bio.concat(propertyChild as string);\n                          }\n                        });\n                      }\n                    }\n                  }\n                });\n              }\n            }\n          }\n        });\n      }\n    });\n    return bio;\n  }\n}\n","import { HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { throwError } from 'rxjs/internal/observable/throwError';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { HttpUtilService } from 'src/app/common/services/http-util.service';\r\nimport { ArtistProxy } from '../artist/artist.service';\r\nimport { Song } from '../song/song.model';\r\nimport {\r\n  ApiHitsResponse, ApiResponseWrapper,\r\n  HitsEnum,\r\n  HttpStatusCode,\r\n  SongResponse\r\n} from './../artist/artist-api-response.model';\r\nimport { Artist } from './../artist/artist.model';\r\nimport { SongProxy } from './../song/song.service';\r\n\r\n/**\r\n * Singleton service to fetch songs/artists for a given query.\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SearchService {\r\n  readonly ROOT_CONTEXT: string = '/genius-api';\r\n  readonly SEARCH_URL: string = `${this.ROOT_CONTEXT}/search`;\r\n\r\n  constructor(\r\n    private httpUtil: HttpUtilService,\r\n    private songProxy: SongProxy,\r\n    private artistProxy: ArtistProxy\r\n  ) { }\r\n\r\n  /**\r\n   * Searches songs for a give query. Does not return duplicates.\r\n   * @param query string\r\n   * @returns Observable stream of unique songs\r\n   */\r\n  public searchSongsStream(query: string): Observable<Set<Song>> {\r\n    return this.searchHitsStream(query).pipe(\r\n      map((songResponses: Set<SongResponse>) =>\r\n        this.getSongDetailsStream(songResponses)\r\n      ), catchError((e) => {\r\n        return throwError('Search songs stream service failed');\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Fetch song information for each song response. Does not return duplicates.\r\n   * @param query string\r\n   * @returns Observable stream of unique songs\r\n   */\r\n  private getSongDetailsStream(songResponses: Set<SongResponse>): Set<Song> {\r\n    const songs: Set<Song> = new Set<Song>();\r\n    songResponses.forEach((songResponse: SongResponse) => {\r\n      this.songProxy.getSongStream(songResponse.id).subscribe((song) => {\r\n        this.artistProxy\r\n          .getArtistStream(songResponse.primary_artist.id)\r\n          .subscribe((artist) => {\r\n            song.singers = new Set<Artist>().add(artist);\r\n            songs.add(song);\r\n          }, catchError(() => {\r\n            return throwError('getSongDetailsStream->getArtistsStream service failed');\r\n          })\r\n          );\r\n      }, catchError(() => {\r\n        return throwError('getSongDetailsStream->getSongStream service failed');\r\n      }) \r\n      );\r\n    });\r\n    return songs;\r\n  }\r\n\r\n  /**\r\n   * Fetches artist information for given query. Does not return duplicates.\r\n   * @param query string\r\n   * @returns Observable stream of unique artists\r\n   */\r\n  public searchArtistsStream(query: string): Observable<Set<Artist>> {\r\n    return this.searchHitsStream(query).pipe(\r\n      map((songResponses: Set<SongResponse>) => {\r\n        const artists: Set<Artist> = new Set<Artist>();\r\n        const artistIds: Set<number> = new Set<number>();\r\n        songResponses.forEach((songResponse) =>\r\n          artistIds.add(songResponse.primary_artist?.id)\r\n        );\r\n        // load artist information for each song response\r\n        artistIds.forEach((artistId: number) =>\r\n          this.artistProxy.getArtistStream(artistId).subscribe((artist) => {\r\n            this.getArtistSongsStream(\r\n              artist.id,\r\n              'popularity',\r\n              '1',\r\n              '4'\r\n            ).subscribe((songs) => {\r\n              artist.songs = songs;\r\n              artists.add(artist);\r\n            });\r\n          })\r\n        );\r\n        return artists;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Makes REST call to hits api which return results matching the query.\r\n   * @param query\r\n   * @returns Observable stream of unique song response\r\n   */\r\n  public searchHitsStream(query: string): Observable<Set<SongResponse>> {\r\n    const httpParams: HttpParams = new HttpParams().set('q', query);\r\n    return this.httpUtil\r\n      .get<ApiResponseWrapper>(this.SEARCH_URL, httpParams)\r\n      .pipe(\r\n        map((apiResponseWrapper) => this.mapSongsResponse(apiResponseWrapper)),\r\n        catchError(() => {\r\n          return throwError('Search hits stream service failed');\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Fetches songs sung by an artist.\r\n   * @param id artist id\r\n   * @param sort ascending/descending order\r\n   * @param page number of pages to be returned\r\n   * @param perPage records per page\r\n   * @returns Observable stream of unique songs\r\n   */\r\n  public getArtistSongsStream(\r\n    id: number,\r\n    sort?: string,\r\n    page?: string,\r\n    perPage?: string\r\n  ): Observable<Set<Song>> {\r\n    const ARTIST_SONGS_URL: string = `${this.artistProxy.URL}/${id}/songs`;\r\n    const httpParams: HttpParams = new HttpParams()\r\n      .set('id', id.toString())\r\n      .append('sort', sort)\r\n      .append('page', page)\r\n      .append('per_page', perPage);\r\n    return this.httpUtil\r\n      .get<ApiResponseWrapper>(ARTIST_SONGS_URL, httpParams)\r\n      .pipe(\r\n        map((apiResponseWrapper) => this.mapSongsResponse(apiResponseWrapper)),\r\n        catchError(() => {\r\n          return throwError(\r\n            'Artist hits stream service failed during map song response.'\r\n          );\r\n        })\r\n      )\r\n      .pipe(\r\n        map((songsResponse) => this.getSongDetailsStream(songsResponse)),\r\n        catchError(() => {\r\n          return throwError(\r\n            'Search hits stream service failed during song details stream.'\r\n          );\r\n        })\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Maps ApiResponseWrapper object to unique set of songs.\r\n   * @param apiResponseWrapper\r\n   */\r\n  public mapSongsResponse(\r\n    apiResponseWrapper: ApiResponseWrapper\r\n  ): Set<SongResponse> {\r\n    const songResponses: Set<SongResponse> = new Set<SongResponse>();\r\n    if (apiResponseWrapper.meta.status === HttpStatusCode.SUCCESS) {\r\n      if (apiResponseWrapper.response && apiResponseWrapper.response['hits']) {\r\n        const apiHitsResponse: ApiHitsResponse = apiResponseWrapper.response as ApiHitsResponse;\r\n        if (\r\n          apiHitsResponse &&\r\n          apiHitsResponse.hits &&\r\n          apiHitsResponse.hits.length\r\n        ) {\r\n          apiHitsResponse.hits\r\n            .filter((hit) => hit.type === HitsEnum.Song)\r\n            .forEach((hit) => songResponses.add(hit.result));\r\n        }\r\n      } else if (\r\n        apiResponseWrapper.response &&\r\n        apiResponseWrapper.response['songs']\r\n      ) {\r\n        const songResponseArray = apiResponseWrapper.response[\r\n          'songs'\r\n        ] as Array<SongResponse>;\r\n        songResponseArray.forEach((songResponse) =>\r\n          songResponses.add(songResponse)\r\n        );\r\n      }\r\n      return songResponses;\r\n    }\r\n  }\r\n}\r\n","\n/**\n * This class provides a 2 way mapping between enum value and enum name.\n * It is useful when an enum is used in a dropdown. \n */\nexport class EnumSelector<E> {\n\n    public keys: string[];\n    private map: Map<E, string> = new Map<E, string>();\n    private enumType: E;\n\n    // tslint:disable-next-line:ban-types\n    constructor(enumType: Object) {\n        this.enumType = enumType as E;\n        this.keys = Object.keys(enumType);\n        this.keys = this.keys.filter((key) => isNaN(Number(key)));\n        this.keys.forEach((key) => this.map.set(enumType[key], key));\n    }\n\n    /**\n     * Returns enum name for a given enum value\n     * @param enumValue value of the enum\n     */\n    public getEnumName(enumValue: E): string {\n        return this.map.get(enumValue);\n    }\n\n    /**\n     * Returns enumValue for a given enum name.\n     * @param enumName name of the enum\n     */\n    public getEnumValue(enumName: string): E {\n        return this.enumType[enumName];\n    }\n}\n","<div class=\"form-group\">\n  <select class=\"form-control\" id=\"sel1\" [(ngModel)]=\"value\" (change)=\"triggerOnChangeEvent($event.target.value)\">\n    <option *ngFor=\"let key of anEnum?.keys\" [value]=\"key\">{{key}}</option>\n  </select>\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { EnumSelector } from '../../services/enum-selector';\n\n/**\n * This component displays enum values in a dropdown.\n */\n@Component({\n  selector: 'app-enum-selector',\n  templateUrl: './enum-selector.component.html'\n})\nexport class EnumSelectorComponent<T> {\n\n  value: string;\n  private enumValue: EnumSelector<T>;\n  private tempValue: T;\n\n  @Input()\n  set anEnum(anEnum: EnumSelector<T>) {\n    if (anEnum !== this.enumValue) {\n      this.enumValue = anEnum;\n      if (this.enumValue && this.tempValue) {\n        this.selectedValue = this.tempValue;\n        delete this.tempValue;\n      }\n    }\n  }\n\n  get anEnum(): EnumSelector<T> { return this.enumValue; }\n\n  @Input()\n  id: string;\n\n  @Input()\n  set selectedValue(value: T) {\n    if (this.enumValue) {\n      this.value = this.anEnum.getEnumName(value);\n    } else {\n      this.tempValue = value;\n    }\n  }\n\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output()\n  private onChange: EventEmitter<EnumValueOnChangePayload<T>> = new EventEmitter<EnumValueOnChangePayload<T>>();\n\n  /**\n   * This method emits the selected enum value.\n   * @param key \n   */\n  triggerOnChangeEvent(key: string): void {\n    const enumValueOnChangedPayload: EnumValueOnChangePayload<T> = {key, value: this.enumValue.getEnumValue(key) };\n    this.onChange.emit(enumValueOnChangedPayload);\n  }\n}\n\nexport interface EnumValueOnChangePayload<T> {\n  key: string;\n  value: T;\n}\n","import { EnumSelector } from './../../common/services/enum-selector';\nimport { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { SearchType } from 'src/app/common/enums/search-type.enum';\nimport { EnumValueOnChangePayload } from 'src/app/common/components/enum-selector/enum-selector.component';\n\n/**\n * This component shows a dropdown containing search criteria values.\n */\n@Component({\n  selector: 'app-search-criteria-dropdown',\n  templateUrl: './search-criteria-dropdown.component.html'\n})\nexport class SearchCriteriaDropdownComponent {\n\n  searchTypeOptions: EnumSelector<SearchType> = new EnumSelector<SearchType>(SearchType);\n\n  @Input()\n  selectedSearchType: SearchType;\n\n  @Output()\n  selectedCriteria: EventEmitter<SearchType> = new EventEmitter<SearchType>();\n\n  /**\n   * This method emits the selected value in the dropdown.\n   * @param event \n   */\n  onChange(event: EnumValueOnChangePayload<SearchType>): void {\n    this.selectedSearchType = event.value;\n    this.selectedCriteria.emit(this.selectedSearchType);\n  }\n\n}\n","<app-enum-selector \n    [id]=\"'search-criteria'\"\n    [anEnum]=\"searchTypeOptions\" \n    [selectedValue]=\"selectedSearchType\" \n    (onChange)=\"onChange($event)\">\n</app-enum-selector>\n","import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n/**\n * This directive prevents invalid characters to be keyed into the input box.\n */\n@Directive({\n  selector: '[appInvalidCharacters]'\n})\nexport class InvalidCharactersDirective {\n  inputElement: ElementRef;\n\n  /**\n   * possible values of input are integer and noSpecialChars\n   */\n  // tslint:disable-next-line:no-input-rename\n  @Input('appInputRestriction') appInputRestriction: string;\n  arabicRegex = '[\\u0600-\\u06FF]';\n\n  constructor(el: ElementRef) {\n    this.inputElement = el;\n  }\n\n  /**\n   * This method check for invalid characters and suppressing them.\n   * @param event keypress event\n   */\n  @HostListener('keypress', ['$event'])\n  onKeyPress(event: Event): void {\n    if (this.appInputRestriction === 'integer') {\n      this.integerOnly(event);\n    } else if (this.appInputRestriction === 'noSpecialChars') {\n      this.noSpecialCharacters(event);\n    }\n  }\n\n  /**\n   * Checks if the event key is an integer\n   * @param event keypress event\n   */\n  integerOnly(event): void {\n    const e = event as KeyboardEvent;\n    if (e.key === 'Tab' || e.key === 'TAB') {\n      return;\n    }\n    if (\n      [46, 8, 9, 27, 13, 110].indexOf(e.keyCode) !== -1 ||\n      // Allow: Ctrl+A\n      (e.keyCode === 65 && e.ctrlKey === true) ||\n      // Allow: Ctrl+C\n      (e.keyCode === 67 && e.ctrlKey === true) ||\n      // Allow: Ctrl+V\n      (e.keyCode === 86 && e.ctrlKey === true) ||\n      // Allow: Ctrl+X\n      (e.keyCode === 88 && e.ctrlKey === true)\n    ) {\n      // let it happen, don't do anything\n      return;\n    }\n    // if key is not a number then prevent/supress it.\n    if (['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'].indexOf(e.key) === -1) {\n      e.preventDefault();\n    }\n  }\n\n  /**\n   * This method checks for special characters and suppressing them accordingly.\n   * @param event \n   */\n  private noSpecialCharacters(event): void {\n    const e = event as KeyboardEvent;\n    if (e.key === 'Tab' || e.key === 'TAB') {\n      return;\n    }\n    let k;\n    k = event.keyCode; \n    if ((k > 64 && k < 91) || // if it is a lowercase alphabet\n        (k > 96 && k < 123) || // or upper case alphabet\n         k === 8 || // or backspace/delete\n         k === 32 || // or spacebar\n        (k >= 48 && k <= 57)) { // or number from 0-9\n      return; // then allow the keys and do NOTHING.\n    }\n    const ch = String.fromCharCode(e.keyCode);\n    const regEx = new RegExp(this.arabicRegex);\n    if (regEx.test(ch)) { // check special characters/string against regular expression\n      return; // if passes then do nothing\n    }\n    e.preventDefault(); // else this is an INVALID character and suppress it\n  }\n\n  /**\n   * This method checks the pasted string for invalid characters\n   * @param event \n   */\n  @HostListener('paste', ['$event']) onPaste(event): void {\n    let regex;\n    if (this.appInputRestriction === 'integer') {\n      regex = /[0-9]/g;\n    } else if (this.appInputRestriction === 'noSpecialChars') {\n      regex = /[a-zA-Z0-9\\u0600-\\u06FF]/g;\n    }\n    const e = event as ClipboardEvent;\n    const pasteData = e.clipboardData.getData('text/plain');\n    let m;\n    let matches = 0;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((m = regex.exec(pasteData)) !== null) {\n      // This is necessary to avoid infinite loops with zero-width matches\n      if (m.index === regex.lastIndex) {\n        regex.lastIndex++;\n      }\n      // The result can be accessed through the `m`-variable.\n      m.forEach((match, groupIndex) => {\n        matches++;\n      });\n    }\n    if (matches === pasteData.length) {\n      return;\n    } else {\n      e.preventDefault();\n    }\n  }\n}\n","<div class=\"row form-group\">\n  <div class=\"offset-1 col-lg-1\">\n    <app-search-criteria-dropdown [selectedSearchType]=\"searchCriteria\"\n      (selectedCriteria)=\"setSearchPlaceholder($event)\">\n    </app-search-criteria-dropdown>\n  </div>\n  <div class=\"col-lg-9\">\n    <input class=\"form-control\" type=\"search\" appInvalidCharacters appInputRestriction=\"noSpecialChars\"\n      [(ngModel)]=\"query\" id=\"example-search-input\" [maxlength]=\"MAX_QUERY_LENGTH\" [minlength]=\"MIN_QUERY_LENGTH\"\n      required #name=\"ngModel\" pattern=\"/[A-Z]{5}\\d{4}[A-Z]{1}/i\" (keydown.enter)=\"getResults()\"\n      [placeholder]=\"placeholder\">\n    <div *ngIf=\"name.errors.maxlength\">\n      Query must not be greater than {{MAX_QUERY_LENGTH}} characters.\n    </div>\n    <div *ngIf=\"name.errors.minlength\">\n      Query must be at least {{MIN_QUERY_LENGTH}} characters long.\n    </div>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"offset-2 col-lg-9\">\n    <div *ngIf=\"searchCriteria === SEARCH_TYPE.Title && showResults\">\n      <div *ngFor=\"let song of songs | async\">\n        <span (click)=\"emitSelectedSong(song);\" style=\"color: blue; cursor: pointer\">\n          <div>\n            <div><strong>{{song?.album?.full_title}}</strong></div>\n            <div>{{song?.releaseDate}}</div>\n            <div *ngFor=\"let singer of song?.singers\">\n              <div>{{singer?.fullName}}</div>\n            </div>\n            <div><i>{{song?.title}}</i></div>\n          </div>\n        </span>\n        <hr>\n      </div>\n      <!-- <div *ngIf=\"noRecordsFound\">\n        <p style=\"color: red;\">No results found.</p>\n      </div> -->\n      <div *ngIf=\"serviceFailed\">\n        <p style=\"color: red;\">Service failed to fetch data. Please contact administrator or try after sometime.</p>\n      </div>\n    </div>\n    <div *ngIf=\"searchCriteria === SEARCH_TYPE.Artist && showResults\">\n      <div *ngFor=\"let artist of artists | async\">\n        <span (click)=\"emitSelectedArtist(artist);\" style=\"color: blue; cursor: pointer\">\n          <div>\n            <span>\n              <img src=\"{{artist?.headerImageURL}}\" alt=\"Sorry.No image found!\" style=\"width:50px;height:50px;\">\n            </span>\n            <span style=\"padding-left:100px;\"><strong>{{artist?.fullName}}</strong></span>\n          </div>\n        </span>\n        <hr>\n      </div>\n      <!-- <div *ngIf=\"noRecordsFound\">\n        <p style=\"color: red;\">No results found.</p>\n      </div> -->\n      <div *ngIf=\"serviceFailed\">\n        <p style=\"color: red;\">Service failed to fetch data. Please contact administrator or try after sometime.</p>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, EventEmitter, Output } from '@angular/core';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { Artist } from '../artist/artist.model';\nimport { Song } from '../song/song.model';\nimport { SearchType } from './../../common/enums/search-type.enum';\nimport { SearchService } from './search.service';\n\n/**\n * This component is responsible for showing the search box along with search dropdown.\n * It queries the backend APIs for a given input.\n */\n@Component({\n  selector: 'app-search-component',\n  templateUrl: './search-component.component.html'\n})\nexport class SearchComponentComponent {\n\n  readonly MAX_QUERY_LENGTH: number = 25;\n  readonly MIN_QUERY_LENGTH: number = 3;\n  readonly SEARCH_TYPE = SearchType;\n\n  @Output()\n  private selectedSong: EventEmitter<Song> = new EventEmitter<Song>();\n  @Output()\n  private selectedArtist: EventEmitter<Artist> = new EventEmitter<Artist>();\n  songs: Observable<Set<Song>>;\n  artists: Observable<Set<Artist>>;\n  query: string;\n  showResults: boolean = true;\n  placeholder: string = 'search by song title..';\n  searchCriteria: SearchType = SearchType.Title; // default is Title\n  noRecordsFound: boolean = false;\n  serviceFailed: boolean = false;\n\n  constructor(\n    private searchService: SearchService\n  ) { }\n\n  /**\n   * Fetches results for a given query string.\n   * Ensures that query string adheres to minimum and maximum query length validation.\n   */\n  public getResults(): void {\n    if (!this.query || this.query.length < this.MIN_QUERY_LENGTH || this.query.length > this.MAX_QUERY_LENGTH) {\n      return;\n    }\n    this.showResults = true;\n    if (this.searchCriteria === SearchType.Title) {\n      this.songs = this.searchService.searchSongsStream(this.query);\n      this.songs.subscribe(result => {\n        this.serviceFailed = false;\n        this.noRecordsFound = result && result.size === 0;\n        console.log('No Records Found : ' + this.noRecordsFound);\n      }, (error) => {\n        console.log(error);\n        this.serviceFailed = true;\n      });\n    }\n    else if (this.searchCriteria === SearchType.Artist) {\n      this.artists = this.searchService.searchArtistsStream(this.query);\n      this.artists.subscribe(result => {\n        this.serviceFailed = false;\n        this.noRecordsFound = result && result.size === 0;\n      }, (error) => {\n        console.log(error);\n        this.serviceFailed = true;\n      });\n    } else {\n      console.warn(`Unknown search criteria type received: ${this.searchCriteria}`);\n    }\n  }\n\n  /**\n   * Sets the placeholder string in the search box\n   * @param searchType Any of the search type enum value. Possible values are : Artist and Title\n   */\n  setSearchPlaceholder(searchType: SearchType): void {\n    this.searchCriteria = searchType;\n    this.placeholder =\n      searchType === SearchType.Title\n        ? 'search by song title..'\n        : 'search by artist name';\n    delete this.query; // reset query to empty\n    this.showResults = false;\n    if (searchType === SearchType.Title) {\n      this.placeholder = 'search by song title..';\n      delete this.artists;\n      this.emitSelectedSong(undefined); // to hide old results\n    } else {\n      this.placeholder = 'search by artist name..';\n      delete this.songs;\n      this.emitSelectedArtist(undefined); // to hide old artist on change of title/artist dropdown\n    }\n  }\n\n  /**\n   * This method emits the selected song\n   * @param song song to be emitted\n   */\n  emitSelectedSong(song: Song): void {\n    this.selectedSong.emit(song);\n    this.showResults = false;\n  }\n\n  /**\n   * This method emits the selected artist\n   * @param artist artist to be emitted\n   */\n  emitSelectedArtist(artist: Artist): void {\n    this.selectedArtist.emit(artist);\n    this.showResults = false;\n  }\n}\n","import { Injectable } from \"@angular/core\";\r\nimport { throwError } from \"rxjs\";\r\nimport { Observable } from 'rxjs/internal/Observable';\r\nimport { catchError, map } from 'rxjs/operators';\r\nimport { HttpUtilService } from '../../common/services/http-util.service';\r\n\r\n/**\r\n * This class loads lyrics information from lyrics html page\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class LyricsService {\r\n\r\n    readonly ROOT_CONTEXT: string = '/genius-lyrics';\r\n\r\n    constructor(private httpUtilService: HttpUtilService) { }\r\n\r\n    /**\r\n     * This method load the lyrics html page and then extracts the lyrics out of it\r\n     * @param lyricsPath url of lyrics page\r\n     * @returns observable stream of string(lyrics)\r\n     */\r\n    public getLyricsStream(lyricsPath: string): Observable<string> {\r\n        return this.httpUtilService.getTextHTML(`${this.ROOT_CONTEXT}${lyricsPath}`)\r\n            .pipe(\r\n                map((data: string) => this.parseData(data)),\r\n                catchError(() => {\r\n                    return throwError('getLyricsStream service failed');\r\n                })\r\n            );\r\n    }\r\n\r\n    /**\r\n     * This method parses the html document and derives the lyrics information from it\r\n     * @param htmlContent html document\r\n     * @returns lyrics\r\n     */\r\n    public parseData(htmlContent: string): string {\r\n        try {\r\n            let parser = new DOMParser();\r\n            const root = parser.parseFromString(htmlContent, 'text/html');\r\n            const lyrics = root.getElementsByTagName('routable-page')[0].getElementsByClassName('lyrics')[0].getElementsByTagName('p')[0].innerText;\r\n            return lyrics;\r\n        } catch (e) {\r\n            console.log('Unable to parse document.');\r\n            console.log(e.message);\r\n            return 'No Lyrics found.'\r\n        }\r\n    }\r\n}\r\n\r\n\r\n","\r\nimport { Component, Input } from '@angular/core';\r\nimport { LyricsService } from './lyrics.service';\r\n\r\n/**\r\n * This component loads and displays song lyrics\r\n */\r\n@Component({\r\n  selector: 'app-lyrics',\r\n  templateUrl: './lyrics.component.html'\r\n})\r\nexport class LyricsComponent  {\r\n\r\n  private _lyricsPath: string;\r\n  lyrics: string;\r\n\r\n  @Input()\r\n  set lyricsPath(value: string) {\r\n    if (value !== this._lyricsPath) {\r\n        this._lyricsPath = value;\r\n        // load lyrics from the path\r\n        this.lyricsService.getLyricsStream(this._lyricsPath).subscribe(lyrics => this.lyrics = lyrics);\r\n    }\r\n  }\r\n\r\n  get lyricsPath(): string {\r\n    return this._lyricsPath;\r\n  }\r\n\r\n  constructor(private lyricsService: LyricsService) {\r\n  }\r\n\r\n}\r\n","<div><i>{{lyrics}}</i></div>","<section class=\"dash-row\">\n  <mat-card id=\"card-0-1\" style=\"color: white\">\n    <mat-card-title>\n      <h1>{{song?.album?.full_title}}</h1>\n    </mat-card-title>\n    <mat-card-subtitle style=\"color: white\">\n      <div>\n        <h2>{{song?.title}}</h2>\n      </div>\n      <div>\n        <h3>{{song?.releaseDate}}</h3>\n      </div>\n    </mat-card-subtitle>\n    <img src=\"{{song?.headerImageURL}}\" alt=\"Sorry.No image found!\" style=\"width:520px;height:700px;\">\n  </mat-card>\n\n  <mat-card id=\"card-0-2\">\n    <mat-card-title>\n      Song Lyrics\n    </mat-card-title>\n    <mat-card-subtitle>See full lyrics <a href=\"{{song?.lyricsURL}}\" target=\"_blank\">here</a></mat-card-subtitle>\n    <app-lyrics [lyricsPath]=\"song?.lyricsPath\"></app-lyrics>\n  </mat-card>\n\n  <mat-card id=\"card-1-1\">\n    <div *ngFor=\"let artist of song?.singers\">\n      <div onclick=\"location.href='#';\" style=\"cursor: pointer;\">\n        <div>\n          <h1>{{artist?.fullName}}</h1>\n        </div>\n        <img src=\"{{artist?.imageURL}}\" alt=\"Sorry.No image found!\" style=\"width:550px;height:550px;\">\n        <br>\n        <div>{{artist?.bio}}</div>\n      </div>\n    </div>\n  </mat-card>\n</section>\n","import { Component, Input } from '@angular/core';\nimport { Song } from '../song/song.model';\n\n/**\n * This component displays the following info in 3 separate tiles\n * 1st tile: Album Title, sub title, release date and album cover image\n * 2nd tile: Lyrics\n * 3rd tile: Singer name, image and biodata\n */\n@Component({\n  selector: 'app-song-display',\n  templateUrl: './song-display.component.html',\n  styleUrls: ['./song-display.component.scss']\n})\nexport class SongDisplayComponent {\n\n  @Input()\n  song: Song;\n\n}\n","<section class=\"dash-row\">\n  <mat-card id=\"card-0-1\" style=\"color: white\">\n    <div onclick=\"location.href='#';\" style=\"cursor: pointer;\">\n      <div>\n        <h1>{{artist?.fullName}}</h1>\n      </div>\n      <img src=\"{{artist?.imageURL}}\" alt=\"Sorry.No image found!\" style=\"width:550px;height:550px;\">\n      <br>\n    </div>\n  </mat-card>\n\n  <mat-card id=\"card-0-2\">\n    <mat-card-title>\n      <h1>Bio</h1>\n    </mat-card-title>\n    <mat-card-subtitle>See full Biography <a href=\"{{artist?.url}}\" target=\"_blank\">here</a></mat-card-subtitle>\n    <div><i>{{artist?.bio}}</i></div>\n  </mat-card>\n\n  <mat-card id=\"card-1-1\">\n    <div *ngFor=\"let song of artist?.songs\">\n      <span>\n        <img src=\"{{song?.headerImageURL}}\" alt=\"Sorry.No image found!\" style=\"width:50px;height:50px;\">\n      </span>\n      <span\n        style=\"padding-left: 50px; color: black; font-size: 14px;\"><strong>{{song?.album?.full_title}}</strong></span>\n      <div><span>{{song?.title}}</span></div>\n      <h4>{{song?.releaseDate}}</h4>\n    </div>\n  </mat-card>\n</section>\n","\nimport { Component, Input } from '@angular/core';\nimport { Artist } from '../artist/artist.model';\n\n/**\n * This component displays the following info in 3 separate tiles\n * 1st tile: Singer name and image\n * 2nd tile: Biodata\n * 3rd tile: Top 5 popular Albums along with Title, sub title, release date and album cover thumbnale image\n */\n@Component({\n  selector: 'app-artist-display',\n  templateUrl: './artist-display.component.html',\n  styleUrls: ['./artist-display.component.scss']\n})\nexport class ArtistDisplayComponent  {\n\n  @Input()\n  artist: Artist;\n\n}\n","<div id=\"dashboard\">\n  <header class=\"dashboard__header\">\n    <h1>Music Database</h1>\n  </header>\n  <section class=\"dash-row\">\n    <mat-card id=\"welcome-message\">\n      <div class=\"welcome__center\">\n        <div class=\"spark-container\">\n          <app-search-component class=\"col-lg-12\" (selectedSong)=\"setSelectedSong($event)\"\n            (selectedArtist)=\"setSelectedArtist($event)\">\n          </app-search-component>\n        </div>\n      </div>\n\n    </mat-card>\n  </section>\n  <div *ngIf=\"song\">\n    <app-song-display [song]=\"song\"></app-song-display>\n  </div>\n  <div *ngIf=\"artist\">\n    <app-artist-display [artist]=\"artist\"></app-artist-display>\n  </div>\n</div>\n","import { Component } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl, Title } from '@angular/platform-browser';\nimport { Artist } from './components/artist/artist.model';\nimport { Song } from './components/song/song.model';\n\n/**\n * Parent component that displays search and results.\n */\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  \n  title = 'Music Database: Search songs and artists';\n  \n  song: Song;\n  artist: Artist;\n\n  constructor(private titleService: Title, private domSanitizer: DomSanitizer){\n    this.titleService.setTitle(this.title); // set the title on browser window top bar\n  }\n\n  /**\n   * Sets the selected song to be displayed\n   * @param song \n   */\n  setSelectedSong(song: Song): void {\n    this.song = song;\n    delete this.artist;\n  }\n\n  /**\n   * Sets the selected artist to be displayed\n   * @param artist \n   */\n  setSelectedArtist(artist: Artist): void {\n    this.artist = artist;\n    delete this.song;\n  }\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppComponent } from './app.component';\nimport { MatCardModule} from '@angular/material/card';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { EnumSelectorComponent } from './common/components/enum-selector/enum-selector.component';\nimport { SearchCriteriaDropdownComponent } from './components/search-criteria-dropdown/search-criteria-dropdown.component';\nimport { SearchComponentComponent } from './components/search-component/search-component.component';\nimport { SongDisplayComponent } from './components/song-display/song-display.component';\nimport { ArtistDisplayComponent } from './components/artist-display/artist-display.component';\nimport { InvalidCharactersDirective } from './common/invalid-characters/invalid-characters.directive';\nimport { LyricsComponent } from './components/lyrics/lyrics.component';\n\n\n/**\n * Main Application Module\n */\n@NgModule({\n  declarations: [\n    AppComponent,\n    SearchComponentComponent,\n    EnumSelectorComponent,\n    SearchCriteriaDropdownComponent,\n    SongDisplayComponent,\n    ArtistDisplayComponent,\n    LyricsComponent,\n    InvalidCharactersDirective\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatCardModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}